Kontrollspørsmål LAB 1
Spørsmålene besvares i egen tekstfil (“ren” tekst, ASCII) med navn readme.txt
0) Les introduksjon til JavaScript på http://w3schools.com/js/js_intro.asp og svar på følgende
spørsmål, ­ hva kan JavaScript brukes til?

Javaskript er en enkel utgave av programmeringsspråk og gjør sidene dynamiske, slik at man slipper å endre hele koden hver gang.

1) Les minst de to gitte linkene og forklar med dine egne ord forskjell på CSS id og class
elementer http://www.tizag.com/cssT/cssid.php,http://css­tricks.com/the­difference­between­id­and­class/

En klasse kan brukes flere ganger på siden, mens hver enkelt id kun kan brukes en gang.
Men de gjør ellers det samme, de legger en bestemt stil til den/de merkede paragrafene eller linjene  og overskriver den overskriver verdien som er satt for hele siden.

2) Vurder og sammenlign brukbarhet til versjoner i deloppgave 0 og deloppgave 1 av designet
for presentasjon av en liste (ta utgangspunkt at listen er mye lengre enn vist i skjermbildene,
over 100 elementer).

Ved mange filer blir designet på siden mere oversiktelig og rent ved å bruke "rullegardin", 
spesielt hvis det er mange lister på samme side.

3) Med hvilken HTML teknikk og designløsning løser Wikipedia
(http://en.wikipedia.org/wiki/List_of_programming_languages) problemstilling med en lang liste
av programmeringsspråk?

Wikipedia bruker Class i sin css, dette er nok enklest da de bruker samme class på mange av tabellene. 
Dette kunne de som nevn tidligere ikke gjort om de brukte id.
De har også valgt å ta bort linjeskift og unødvendig tekst i kildekoden sin.


4) Ved å søke på WWW finn ut selv og forklar kort hva som er hovedforskjeller mellom et
<div> og et <span> element (tagg) i HTML.

"div" er et blockelement, mens <span> er et inlineelement. 
Du kan blandt annet se dette ved at det er en tom linje etter "div".
Begge kan brukes til å "bokse inn" tekstbolker i css

5) Hvike brukbarhetsproblemer er det med den siste versjonen av implementeringen i
deloppgaven 2? Nevn gjerne hvordan man kunne løse problemene. (Tips: overlapp mellom
forskjellige grafiske elementer og tilfelle hvor man ønsker å selektere det første navnet på
programmeringsspårket i listen)

Alternativ en kan ikke velges før man har trykket på et av de andre alternativene. 
Jeg har valgt å løse dette med å legge til en ekstra linje øverst, som heter velg programmeringsspråk.




Svar på kontrollspørsmål LAB2:

Forklar hvilken deler av din applikasjon så langt, implementerer de forskjellige lagene i MVC
Arkitekturen. MVC står får Model­View­Controller, som til norsk kan oversettes til
Modell­Presentasjon­Kontroller.

Slik jeg forstår M-V-C så er modellen Javascript og CSS ene som er brukt i oppgavene. 
Disse kan man ta vare på å bruke igjen senere.

View høres ut som html siden og brukergrensesnittet som kommer frem når brukeren åpner siden.
Altså helheten som brukeren ser på maskinen sin, 
og det som skjer når han trykker på linkene og velger fra rullegardinene. 

Kontrolleren henter ut Javascript og css fra modellen.
Fargene og plasseringen av de ulike tabellene, og boksene hentes fra Css når siden åpnes,
og "rullegardinfunksjonen" med språkene og linkene i menyen vil hentes fra JavaScript når det skjer en spørring.




kilder: Jeg har brukt linkene og informasjonen på http://www.w3schools.com/ som hjelp i arbeidet med disse oppgavene.
		I tillegg har jeg brukt ulike språk på wikipedia for å forstå hva MCVC er. 
		I starten av LAB1 fikk jeg hjelp av en kamerat.

Kontroll Spørsmål LAB3:

Spørsmålene besvares i README­filen i GitHub.
0) Hva er fordelen med et eksisterende JavaScript bibliotek som jQuery i motsetning til å
skrive en “rå” JavaScript for dynamisk endring av HTML sider? 

Det er standard funksjoner som kan brukes, og de vil fungere på tvers av nettlesere.
Da slipper man å lage koder der hvor det allerede eksisterer bedre koder for det man vil oppnå. Og ofte bare bruke en enkelt kode til å "endre" flere elementer.


1) Les denne artikkelen
http://www.ibm.com/developerworks/web/library/wa­htmlmark/index.html og svar på følgende
spørsmål: Hva er sterke sider til HTML/CSS og hva er sterke sider til Canvas? I hvilke
situasjoner er det meningsfult å bruke Canvas?
HTML/CSS:
-HTML og CSS er enklere når man skal legge inn tekst med ulike farger og fonter.

-Teksten plukkes opp av søkemaskinenes "speidere". 

-er tilpasset blinde og svaksynte, da den er egnet til opplesning hvor det skilles mellom fotnoter, lister og overskrifter.

-man kan navigere på siden ved å bruke standard "snarveier"

-bruker hyperlinker

-Spesielt HTML5 har mange løsninger rundt de ulike elementene, spesialtilpasset android, iphone ol.

Canvas:
-er god på grafikk
-viser samme resultat i nettlesere og android/iphone. 
-raskere i nettleser. Må ikke oppdatere hele sidene slik som HTML.

Canvas er blant annet bedre når man skal lage f.eks spill.


2) Hvilken grafisk presentasjonsmåte (se Innledning til denne oppgaven) hadde du sagt at
HTML5 Canvas representerer? Forklar.

Piksler. Komplekse oppgaver ville bli utført raskt og bildene ville være av høy kvalitet. 

men kan også være streker. Canvas i HTML5 har abstrakte metoder for slike primitive
elementer, som for eksempel drawLine.


3) EKSTRA (bare for de spesielt interesserte): en mangel på resultatet fra deloppgave 2 er at
hvis man trykker musen nærme kanten, kan man ikke se hele teksten siden den klippes vekk
hvis den går utover Canvas grenser; hvordan kunne man “fikse” på det vha. metodene fra
jCanvas? Lever i lab3_v4.html.


X) Hvis du fikk hjelp til å gjennomføre denne oppgaven av noen, samarbeidet med noen, oppgi
navn på disse personene. Oppgi også ca. tid det tok deg for å gjennomføre denne oppgaven
(f. eks. 2t 30m)

Jeg sammarbeidet med Jarle i gruppen min på de aller fleste oppgavene. 0.a og 1.a klarte jeg greit alene. Jeg brukte mye tid på prøving og feiling på spørsmål 0. b og 1.b, vet ikke hvor mange timer jeg satt med det. Resten av oppgavene tok ca 3 timer.

